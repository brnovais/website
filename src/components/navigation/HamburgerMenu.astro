---
import AcademicCapIcon from '@components/icons/heroicons/AcademicCapIcon.astro';
import DocumentTextIcon from '@components/icons/heroicons/DocumentTextIcon.astro';
import EnvelopeIcon from '@components/icons/heroicons/EnvelopeIcon.astro';
import HamburgerMenuItem from '@components/navigation/HamburgerMenuItem.astro';
import HomeIcon from '@components/icons/heroicons/HomeIcon.astro';
import UserIcon from '@components/icons/heroicons/UserIcon.astro';
---

<hamburger-menu class="relative">
  <div
    class="absolute
            right-2
            top-10
            flex
            w-32
            origin-top-right
            scale-0
            flex-col
            overflow-hidden
            rounded-lg
            bg-light/95
            shadow-lg
            motion-safe:duration-500
            dark:bg-dark/90"
  >
    <HamburgerMenuItem href="/">
      In√≠cio <HomeIcon className="inline size-6" />
    </HamburgerMenuItem>

    <HamburgerMenuItem href="/sobre/bruno-novais/">
      Sobre <UserIcon className="inline size-6" />
    </HamburgerMenuItem>

    <HamburgerMenuItem href="/artigos">
      Artigos <DocumentTextIcon className="inline size-6" />
    </HamburgerMenuItem>

    <HamburgerMenuItem href="/cursos">
      Cursos <AcademicCapIcon className="inline size-6" />
    </HamburgerMenuItem>

    <HamburgerMenuItem href="/contato">
      Contato <EnvelopeIcon className="inline size-6" />
    </HamburgerMenuItem>
  </div>

  <button class="relative box-border space-y-1.5">
    <div class="h-0.5 w-7 bg-dark motion-safe:duration-500 dark:bg-light"></div>
    <div class="h-0.5 w-7 bg-dark motion-safe:duration-100 dark:bg-light"></div>
    <div class="h-0.5 w-7 bg-dark motion-safe:duration-500 dark:bg-light"></div>
  </button>
</hamburger-menu>

<script>
  class HamburgerMenu extends HTMLElement {
    private isOpen: boolean = false;

    constructor() {
      super();
    }

    connectedCallback(): void {
      document.addEventListener('keydown', this, false);
      document.addEventListener('mousedown', this, false);
      this.addEventListener('click', this.onClick);
    }

    disconnectedCallback(): void {
      this.removeEventListener('click', this.onClick);
      document.removeEventListener('mousedown', this);
      document.removeEventListener('keydown', this);
    }

    onClick(event: MouseEvent): void {
      this.toggle();
    }

    handleEvent(event: KeyboardEvent | MouseEvent): void {
      if (event instanceof MouseEvent) {
        const target: EventTarget | null = event.target;

        if (target instanceof Node && !this.contains(target)) {
          this.close();
        }
      } else {
        if (event.key === 'Escape') {
          this.close();
        }
      }
    }

    toggle(): void {
      if (this.isOpen) {
        this.close();
      } else {
        this.open();
      }
    }

    open(): void {
      this.children[0].classList.remove('scale-0');

      this.children[1].children[0].classList.add('translate-y-2', 'rotate-45');
      this.children[1].children[1].classList.add('opacity-0');
      this.children[1].children[2].classList.add(
        '-translate-y-2',
        '-rotate-45'
      );

      this.isOpen = true;
    }

    close(): void {
      this.children[0].classList.add('scale-0');

      this.children[1].children[0].classList.remove(
        'translate-y-2',
        'rotate-45'
      );
      this.children[1].children[1].classList.remove('opacity-0');
      this.children[1].children[2].classList.remove(
        '-translate-y-2',
        '-rotate-45'
      );

      this.isOpen = false;
    }
  }

  customElements.define('hamburger-menu', HamburgerMenu);
</script>
